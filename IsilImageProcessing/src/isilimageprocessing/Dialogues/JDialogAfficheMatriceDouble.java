/*
 * JDialogAfficheFourier.java
 *
 * Created on 9 août 2007, 9:23
 */

package isilimageprocessing.Dialogues;

import CImage.*;
import CImage.Exceptions.CImageNGException;
import CImage.Observers.JLabelBeanCImage;
import java.io.*;
import javax.swing.*;

/**
 *
 * @author  HP_Propriétaire
 */
public class JDialogAfficheMatriceDouble extends javax.swing.JDialog 
{
    private double Max;
    private double Min;
    private double blanc;
    private double noir;
    
    private final int D = 512;
    
    private double   matrice[][];
    private int      M,N;
    private CImageNG image;
    private int      matrice_int[][];
    
    private JLabelBeanCImage observer;
    
    /** Creates new form JDialogAfficheFourier */
    public JDialogAfficheMatriceDouble(java.awt.Frame parent, boolean modal,double m[][],String titre) 
    {
        super(parent, modal);
        initComponents();
        setTitle(titre);
        
        matrice = m;
        M = matrice.length;
        N = matrice[0].length;
        matrice_int = new int[M][N];
        try 
        {
            image = new CImageNG(M,N,0);
        } 
        catch (CImageNGException ex) 
        { System.out.println("Erreur CImageNG : " + ex.getMessage()); }
        
        observer = new JLabelBeanCImage(image);
        jScrollPane1.setViewportView(observer);
        
        jSliderNoir.setMaximum(D);
        jSliderNoir.setValue(0);
        jSliderBlanc.setMaximum(D);
        jSliderBlanc.setValue(D);
        
        // ***** Recherche du Min *****
        Min = matrice[0][0];
        for(int i=0 ; i<M ; i++)
            for(int j=0 ; j<N ; j++)
                if (matrice[i][j] < Min) Min = matrice[i][j];
        jLabelValeurMin.setText("" + Min);
        noir = Min;
        jTextFieldNoir.setText("" + noir);
        
        // ***** Recherche du Max *****
        Max = matrice[0][0];
        for(int i=0 ; i<M ; i++)
            for(int j=0 ; j<N ; j++)
                if (matrice[i][j] > Max) Max = matrice[i][j];
        jLabelValeurMax.setText("" + Max);
        blanc = Max;
        jTextFieldBlanc.setText("" + blanc);
        
        MiseAJourCImage();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jLabelValeurMax = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelValeurMin = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jSliderBlanc = new javax.swing.JSlider();
        jSliderNoir = new javax.swing.JSlider();
        jTextFieldBlanc = new javax.swing.JTextField();
        jTextFieldNoir = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jLabel1.setText("Valeur MAX :");

        jLabelValeurMax.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelValeurMax.setForeground(new java.awt.Color(0, 0, 255));
        jLabelValeurMax.setText("0.0");

        jLabel2.setText("Valeur MIN :");

        jLabelValeurMin.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelValeurMin.setForeground(new java.awt.Color(0, 0, 255));
        jLabelValeurMin.setText("0.0");

        jSliderBlanc.setForeground(new java.awt.Color(255, 255, 255));
        jSliderBlanc.setMaximum(1000);
        jSliderBlanc.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderBlanc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jSliderBlancMouseReleased(evt);
            }
        });
        jSliderBlanc.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBlancStateChanged(evt);
            }
        });

        jSliderNoir.setForeground(new java.awt.Color(0, 1, 0));
        jSliderNoir.setMaximum(1000);
        jSliderNoir.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderNoir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jSliderNoirMouseReleased(evt);
            }
        });
        jSliderNoir.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderNoirStateChanged(evt);
            }
        });

        jTextFieldBlanc.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTextFieldBlanc.setForeground(new java.awt.Color(255, 0, 0));
        jTextFieldBlanc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldBlanc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBlancActionPerformed(evt);
            }
        });

        jTextFieldNoir.setBackground(new java.awt.Color(0, 0, 0));
        jTextFieldNoir.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTextFieldNoir.setForeground(new java.awt.Color(255, 0, 0));
        jTextFieldNoir.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldNoir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNoirActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/DD 27_p3.jpg")));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelValeurMin)
                        .addGap(50, 50, 50)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelValeurMax)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 225, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jSliderNoir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                                .addComponent(jSliderBlanc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextFieldBlanc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                            .addComponent(jTextFieldNoir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabelValeurMin)
                        .addComponent(jLabel1)
                        .addComponent(jLabelValeurMax))
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldBlanc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSliderNoir, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                            .addComponent(jSliderBlanc, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNoir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser choix = new JFileChooser();
	File fichier;
			
	choix.setCurrentDirectory(new File ("."));
	if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
	{
            fichier = choix.getSelectedFile();
            if (fichier != null)
            {
                try 
                {
                    image.enregistreFormatPNG(fichier);
                } 
                catch (IOException ex) 
                {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
	}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void MiseAJourCImage()
    {
        int val;

        for(int i=0 ; i<M ; i++)
            for(int j=0 ; j<N ; j++)
            {
                if (matrice[i][j] >= blanc)
                {
                    matrice_int[i][j] = 255;
                }
                else
                {
                    if (matrice[i][j] <= noir)
                    {
                        matrice_int[i][j] = 0;
                    }
                    else
                    {
                        val = (int)((matrice[i][j] - noir)/(blanc-noir)*255+0.5);
                        if (val > 255) val = 255;
                        if (val < 0) val = 0;
                        matrice_int[i][j] = val;
                    }
                }
            }
        try 
        {
            image.setMatrice(matrice_int);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }
    
    private void jTextFieldNoirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNoirActionPerformed
        double val = Double.parseDouble(jTextFieldNoir.getText());
        if (val < Min)
        {
            jSliderNoir.setValue(0);
            return;
        }
        if (val >= blanc)
        {
            jSliderNoir.setValue(jSliderBlanc.getValue()-1);
            return;
        }
        int s = (int)((double)D*(val-Min)/(Max-Min)+0.5);
        jSliderNoir.setValue(s);

    }//GEN-LAST:event_jTextFieldNoirActionPerformed

    private void jTextFieldBlancActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBlancActionPerformed
        double val = Double.parseDouble(jTextFieldBlanc.getText());
        if (val > Max)
        {
            jSliderBlanc.setValue(D);
            return;
        }
        if (val <= noir)
        {
            jSliderBlanc.setValue(jSliderNoir.getValue()+1);
            return;
        }
        int s = (int)((double)D*(val-Min)/(Max-Min)+0.5);
        jSliderBlanc.setValue(s);
    }//GEN-LAST:event_jTextFieldBlancActionPerformed

    private void jSliderNoirMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderNoirMouseReleased
        if (jSliderNoir.getValue() >= jSliderBlanc.getValue())
            jSliderNoir.setValue(jSliderBlanc.getValue()-1);
    }//GEN-LAST:event_jSliderNoirMouseReleased

    private void jSliderBlancMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderBlancMouseReleased
        if (jSliderBlanc.getValue() <= jSliderNoir.getValue()) 
            jSliderBlanc.setValue(jSliderNoir.getValue()+1); 
    }//GEN-LAST:event_jSliderBlancMouseReleased

    private void jSliderBlancStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBlancStateChanged
        int sNoir = jSliderNoir.getValue();
        int sBlanc = jSliderBlanc.getValue();
        
        if (sBlanc > sNoir)
        {
            blanc = Min + (Max-Min)*(double)sBlanc/(double)D;
            jTextFieldBlanc.setText("" + blanc);
        }
        
        MiseAJourCImage();
    }//GEN-LAST:event_jSliderBlancStateChanged

    private void jSliderNoirStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderNoirStateChanged
        int sNoir = jSliderNoir.getValue();
        int sBlanc = jSliderBlanc.getValue();
        
        if (sBlanc > sNoir)
        {
            noir = Min + (Max-Min)*(double)sNoir/(double)D;
            jTextFieldNoir.setText("" + noir);
        }

        MiseAJourCImage();
    }//GEN-LAST:event_jSliderNoirStateChanged
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JDialogAfficheMatriceDouble(new javax.swing.JFrame(), true,null,null).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelValeurMax;
    private javax.swing.JLabel jLabelValeurMin;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSliderBlanc;
    private javax.swing.JSlider jSliderNoir;
    private javax.swing.JTextField jTextFieldBlanc;
    private javax.swing.JTextField jTextFieldNoir;
    // End of variables declaration//GEN-END:variables
    
}
