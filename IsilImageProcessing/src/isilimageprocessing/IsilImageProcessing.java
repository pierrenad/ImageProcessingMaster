/*
 * TestCImage2.java
 *
 * Created on 10 juillet 2007, 16:50
 */
package isilimageprocessing;

import CImage.*;
import CImage.Exceptions.*;
import CImage.Observers.*;
import CImage.Observers.Events.*;
import ImageProcessing.Complexe.*;
import ImageProcessing.Fourier.Fourier;
import ImageProcessing.Histogramme.Histogramme;
import ImageProcessing.NonLineaire.*;
import ImageProcessing.Contours.*;
import ImageProcessing.Seuillage.*;
import isilimageprocessing.Dialogues.*;
import java.awt.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author HP_Propriétaire
 */
public class IsilImageProcessing extends javax.swing.JFrame implements ClicListener, SelectLigneListener, SelectRectListener, SelectRectFillListener, SelectCercleListener, SelectCercleFillListener {

    private CImageRGB imageRGB;
    private CImageNG imageNG;

    private JLabelBeanCImage observer;
    private Color couleurPinceauRGB;
    private int couleurPinceauNG;

    /**
     * Creates new form TestCImage2
     */
    public IsilImageProcessing() {
        initComponents();

        imageRGB = null;
        imageNG = null;

        observer = new JLabelBeanCImage();
        observer.addClicListener(this);
        observer.addSelectLigneListener(this);
        observer.addSelectRectListener(this);
        observer.addSelectRectFillListener(this);
        observer.addSelectCercleListener(this);
        observer.addSelectCercleFillListener(this);
        observer.setMode(JLabelBeanCImage.INACTIF);
        jScrollPane.setViewportView(observer);

        jMenuDessiner.setEnabled(false);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
        jMenuFiltrageLineaire.setEnabled(false);
        jMenuTraitementNonLineaire.setEnabled(false);
        jMenuContours.setEnabled(false);
        jMenuSeuillage.setEnabled(false);

        couleurPinceauRGB = Color.BLACK;
        couleurPinceauNG = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupDessiner = new javax.swing.ButtonGroup();
        jScrollPane = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuImage = new javax.swing.JMenu();
        jMenuNouvelle = new javax.swing.JMenu();
        jMenuItemNouvelleRGB = new javax.swing.JMenuItem();
        jMenuItemNouvelleNG = new javax.swing.JMenuItem();
        jMenuOuvrir = new javax.swing.JMenu();
        jMenuItemOuvrirRGB = new javax.swing.JMenuItem();
        jMenuItemOuvrirNG = new javax.swing.JMenuItem();
        jMenuItemEnregistrerSous = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuQuitter = new javax.swing.JMenuItem();
        jMenuDessiner = new javax.swing.JMenu();
        jMenuItemCouleurPinceau = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jCheckBoxMenuItemDessinerPixel = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerLigne = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectangle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectanglePlein = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCercle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCerclePlein = new javax.swing.JCheckBoxMenuItem();
        jMenuFourier = new javax.swing.JMenu();
        jMenuFourierAfficher = new javax.swing.JMenu();
        jMenuItemFourierAfficherModule = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPhase = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieReelle = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieImaginaire = new javax.swing.JMenuItem();
        jMenuHistogramme = new javax.swing.JMenu();
        jMenuHistogrammeAfficher = new javax.swing.JMenuItem();
        jMenuHistogrammeAfficherParametres = new javax.swing.JMenuItem();
        jMenuHistogrammeTransformations = new javax.swing.JMenu();
        jMenuHistogrammeTransformationsLineaire = new javax.swing.JMenuItem();
        jMenuHistogrammeTransformationsLineaireAvecSaturation = new javax.swing.JMenuItem();
        jMenuHistogrammeTransformationsGamma = new javax.swing.JMenuItem();
        jMenuHistogrammeTransformationsEgalisation = new javax.swing.JMenuItem();
        jMenuHistogrammeTransformationsNegatif = new javax.swing.JMenuItem();
        jMenuFiltrageLineaire = new javax.swing.JMenu();
        jMenuFiltrageLineaireGlobal = new javax.swing.JMenu();
        jMenuFiltrageLineaireGlobalPasseBasIdeal = new javax.swing.JMenuItem();
        jMenuFiltrageLineaireGlobalPasseHautIdeal = new javax.swing.JMenuItem();
        jMenuFiltrageLineaireGlobalPasseBasButterworth = new javax.swing.JMenuItem();
        jMenuFiltrageLineaireGlobalPasseHautButterworth = new javax.swing.JMenuItem();
        jMenuFiltrageLineaireLocal = new javax.swing.JMenu();
        jMenuFiltrageLineaireLocalMasqueConvolution = new javax.swing.JMenuItem();
        jMenuFiltrageLineaireLocalMoyenneur = new javax.swing.JMenuItem();
        jMenuTraitementNonLineaire = new javax.swing.JMenu();
        jMenuTraitementNonLineaireElementaire = new javax.swing.JMenu();
        jMenuTraitementNonLineaireElementaireErosion = new javax.swing.JMenuItem();
        jMenuTraitementNonLineaireElementaireDilatation = new javax.swing.JMenuItem();
        jMenuTraitementNonLineaireElementaireOuverture = new javax.swing.JMenuItem();
        jMenuTraitementNonLineaireElementaireFermeture = new javax.swing.JMenuItem();
        jMenuTraitementNonLineaireComplexe = new javax.swing.JMenu();
        jMenuTraitementNonLineaireComplexeDilatationGeo = new javax.swing.JMenuItem();
        jMenuTraitementNonLineaireComplexeReconstructionGeo = new javax.swing.JMenuItem();
        jMenuTraitementNonLineaireComplexeFiltreMedian = new javax.swing.JMenuItem();
        jMenuContours = new javax.swing.JMenu();
        jMenuContoursLineaire = new javax.swing.JMenu();
        jMenuContoursLineaireGradientPrewitt = new javax.swing.JMenuItem();
        jMenuContoursLineaireGradientSobel = new javax.swing.JMenuItem();
        jMenuContoursLineaireLaplacien4 = new javax.swing.JMenuItem();
        jMenuContoursLineaireLaplacien8 = new javax.swing.JMenuItem();
        jMenuContoursNonLineaire = new javax.swing.JMenu();
        jMenuContoursNonLineaireGradientErosion = new javax.swing.JMenuItem();
        jMenuContoursNonLineaireGradientDilatation = new javax.swing.JMenuItem();
        jMenuContoursNonLineaireGradientBeucher = new javax.swing.JMenuItem();
        jMenuContoursNonLineaireLaplacien = new javax.swing.JMenuItem();
        jMenuSeuillage = new javax.swing.JMenu();
        jMenuSeuillageSimple = new javax.swing.JMenuItem();
        jMenuSeuillageDouble = new javax.swing.JMenuItem();
        jMenuSeuillageAutomatique = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TestCImage3");

        jMenuImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Net 13_p1.jpg"))); // NOI18N
        jMenuImage.setText("Image");

        jMenuNouvelle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/File 65_p3.jpg"))); // NOI18N
        jMenuNouvelle.setText("Nouvelle");

        jMenuItemNouvelleRGB.setText("Image RGB");
        jMenuItemNouvelleRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleRGBActionPerformed(evt);
            }
        });
        jMenuNouvelle.add(jMenuItemNouvelleRGB);

        jMenuItemNouvelleNG.setText("Image NG");
        jMenuItemNouvelleNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleNGActionPerformed(evt);
            }
        });
        jMenuNouvelle.add(jMenuItemNouvelleNG);

        jMenuImage.add(jMenuNouvelle);

        jMenuOuvrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Folder 036_p3.jpg"))); // NOI18N
        jMenuOuvrir.setText("Ouvrir");

        jMenuItemOuvrirRGB.setText("Image RGB");
        jMenuItemOuvrirRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirRGBActionPerformed(evt);
            }
        });
        jMenuOuvrir.add(jMenuItemOuvrirRGB);

        jMenuItemOuvrirNG.setText("Image NG");
        jMenuItemOuvrirNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirNGActionPerformed(evt);
            }
        });
        jMenuOuvrir.add(jMenuItemOuvrirNG);

        jMenuImage.add(jMenuOuvrir);

        jMenuItemEnregistrerSous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/DD 27_p3.jpg"))); // NOI18N
        jMenuItemEnregistrerSous.setText("Enregistrer sous...");
        jMenuItemEnregistrerSous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEnregistrerSousActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuItemEnregistrerSous);
        jMenuImage.add(jSeparator1);

        jMenuQuitter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 59_p3.jpg"))); // NOI18N
        jMenuQuitter.setText("Quitter");
        jMenuQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuQuitterActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuQuitter);

        jMenuBar1.add(jMenuImage);

        jMenuDessiner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Display 28_p1.jpg"))); // NOI18N
        jMenuDessiner.setText("Dessiner");

        jMenuItemCouleurPinceau.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Display 14_p3.jpg"))); // NOI18N
        jMenuItemCouleurPinceau.setText("Couleur");
        jMenuItemCouleurPinceau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCouleurPinceauActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jMenuItemCouleurPinceau);
        jMenuDessiner.add(jSeparator2);

        jCheckBoxMenuItemDessinerPixel.setText("Pixel");
        jCheckBoxMenuItemDessinerPixel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerPixelActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerPixel);

        jCheckBoxMenuItemDessinerLigne.setText("Ligne");
        jCheckBoxMenuItemDessinerLigne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerLigneActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerLigne);

        jCheckBoxMenuItemDessinerRectangle.setText("Rectangle");
        jCheckBoxMenuItemDessinerRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectangleActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectangle);

        jCheckBoxMenuItemDessinerRectanglePlein.setText("Rectangle plein");
        jCheckBoxMenuItemDessinerRectanglePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectanglePlein);

        jCheckBoxMenuItemDessinerCercle.setText("Cercle");
        jCheckBoxMenuItemDessinerCercle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCercleActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerCercle);

        jCheckBoxMenuItemDessinerCerclePlein.setText("Cercle plein");
        jCheckBoxMenuItemDessinerCerclePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCerclePleinActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerCerclePlein);

        jMenuBar1.add(jMenuDessiner);

        jMenuFourier.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 51_p1.jpg"))); // NOI18N
        jMenuFourier.setText("Fourier");

        jMenuFourierAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 51_p3.jpg"))); // NOI18N
        jMenuFourierAfficher.setText("Afficher");

        jMenuItemFourierAfficherModule.setText("Module");
        jMenuItemFourierAfficherModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherModuleActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherModule);

        jMenuItemFourierAfficherPhase.setText("Phase");
        jMenuItemFourierAfficherPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPhaseActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPhase);

        jMenuItemFourierAfficherPartieReelle.setText("Partie Reelle");
        jMenuItemFourierAfficherPartieReelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieReelleActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieReelle);

        jMenuItemFourierAfficherPartieImaginaire.setText("Partie Imaginaire");
        jMenuItemFourierAfficherPartieImaginaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieImaginaireActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieImaginaire);

        jMenuFourier.add(jMenuFourierAfficher);

        jMenuBar1.add(jMenuFourier);

        jMenuHistogramme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_48_hot.jpg"))); // NOI18N
        jMenuHistogramme.setText("Histogramme");

        jMenuHistogrammeAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg"))); // NOI18N
        jMenuHistogrammeAfficher.setText("Afficher");
        jMenuHistogrammeAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeAfficherActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeAfficher);

        jMenuHistogrammeAfficherParametres.setText("Afficher les paramètres de limage");
        jMenuHistogrammeAfficherParametres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeAfficherParametresActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeAfficherParametres);

        jMenuHistogrammeTransformations.setText("Transformations");

        jMenuHistogrammeTransformationsLineaire.setText("Lineaire");
        jMenuHistogrammeTransformationsLineaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeTransformationsLineaireActionPerformed(evt);
            }
        });
        jMenuHistogrammeTransformations.add(jMenuHistogrammeTransformationsLineaire);

        jMenuHistogrammeTransformationsLineaireAvecSaturation.setText("Lineaire avec saturation");
        jMenuHistogrammeTransformationsLineaireAvecSaturation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeTransformationsLineaireAvecSaturationActionPerformed(evt);
            }
        });
        jMenuHistogrammeTransformations.add(jMenuHistogrammeTransformationsLineaireAvecSaturation);

        jMenuHistogrammeTransformationsGamma.setText("Gamma");
        jMenuHistogrammeTransformationsGamma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeTransformationsGammaActionPerformed(evt);
            }
        });
        jMenuHistogrammeTransformations.add(jMenuHistogrammeTransformationsGamma);

        jMenuHistogrammeTransformationsEgalisation.setText("Egalisation de l'histogramme");
        jMenuHistogrammeTransformationsEgalisation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeTransformationsEgalisationActionPerformed(evt);
            }
        });
        jMenuHistogrammeTransformations.add(jMenuHistogrammeTransformationsEgalisation);

        jMenuHistogrammeTransformationsNegatif.setText("Negatif de l'image");
        jMenuHistogrammeTransformationsNegatif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeTransformationsNegatifActionPerformed(evt);
            }
        });
        jMenuHistogrammeTransformations.add(jMenuHistogrammeTransformationsNegatif);

        jMenuHistogramme.add(jMenuHistogrammeTransformations);

        jMenuBar1.add(jMenuHistogramme);

        jMenuFiltrageLineaire.setText("Filtrage linéaire");

        jMenuFiltrageLineaireGlobal.setText("Global");

        jMenuFiltrageLineaireGlobalPasseBasIdeal.setText("Filtre passe bas idéal");
        jMenuFiltrageLineaireGlobalPasseBasIdeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFiltrageLineaireGlobalPasseBasIdealActionPerformed(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuFiltrageLineaireGlobalPasseBasIdeal);

        jMenuFiltrageLineaireGlobalPasseHautIdeal.setText("Filtre passe haut idéal");
        jMenuFiltrageLineaireGlobalPasseHautIdeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFiltrageLineaireGlobalPasseHautIdealActionPerformed(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuFiltrageLineaireGlobalPasseHautIdeal);

        jMenuFiltrageLineaireGlobalPasseBasButterworth.setText("Filtre passe bas butterworth");
        jMenuFiltrageLineaireGlobalPasseBasButterworth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFiltrageLineaireGlobalPasseBasButterworthActionPerformed(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuFiltrageLineaireGlobalPasseBasButterworth);

        jMenuFiltrageLineaireGlobalPasseHautButterworth.setText("Filtre passe haut butterworth");
        jMenuFiltrageLineaireGlobalPasseHautButterworth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFiltrageLineaireGlobalPasseHautButterworthActionPerformed(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuFiltrageLineaireGlobalPasseHautButterworth);

        jMenuFiltrageLineaire.add(jMenuFiltrageLineaireGlobal);

        jMenuFiltrageLineaireLocal.setText("Local");

        jMenuFiltrageLineaireLocalMasqueConvolution.setText("Filtre masque convolution");
        jMenuFiltrageLineaireLocalMasqueConvolution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFiltrageLineaireLocalMasqueConvolutionActionPerformed(evt);
            }
        });
        jMenuFiltrageLineaireLocal.add(jMenuFiltrageLineaireLocalMasqueConvolution);

        jMenuFiltrageLineaireLocalMoyenneur.setText("Filtre moyenneur");
        jMenuFiltrageLineaireLocalMoyenneur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFiltrageLineaireLocalMoyenneurActionPerformed(evt);
            }
        });
        jMenuFiltrageLineaireLocal.add(jMenuFiltrageLineaireLocalMoyenneur);

        jMenuFiltrageLineaire.add(jMenuFiltrageLineaireLocal);

        jMenuBar1.add(jMenuFiltrageLineaire);

        jMenuTraitementNonLineaire.setText("Traitement non-linéaire");

        jMenuTraitementNonLineaireElementaire.setText("Elementaire");

        jMenuTraitementNonLineaireElementaireErosion.setText("Erosion");
        jMenuTraitementNonLineaireElementaireErosion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTraitementNonLineaireElementaireErosionActionPerformed(evt);
            }
        });
        jMenuTraitementNonLineaireElementaire.add(jMenuTraitementNonLineaireElementaireErosion);

        jMenuTraitementNonLineaireElementaireDilatation.setText("Dilatation");
        jMenuTraitementNonLineaireElementaireDilatation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTraitementNonLineaireElementaireDilatationActionPerformed(evt);
            }
        });
        jMenuTraitementNonLineaireElementaire.add(jMenuTraitementNonLineaireElementaireDilatation);

        jMenuTraitementNonLineaireElementaireOuverture.setText("Ouverture");
        jMenuTraitementNonLineaireElementaireOuverture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTraitementNonLineaireElementaireOuvertureActionPerformed(evt);
            }
        });
        jMenuTraitementNonLineaireElementaire.add(jMenuTraitementNonLineaireElementaireOuverture);

        jMenuTraitementNonLineaireElementaireFermeture.setText("Fermeture");
        jMenuTraitementNonLineaireElementaireFermeture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTraitementNonLineaireElementaireFermetureActionPerformed(evt);
            }
        });
        jMenuTraitementNonLineaireElementaire.add(jMenuTraitementNonLineaireElementaireFermeture);

        jMenuTraitementNonLineaire.add(jMenuTraitementNonLineaireElementaire);

        jMenuTraitementNonLineaireComplexe.setText("Complexe");

        jMenuTraitementNonLineaireComplexeDilatationGeo.setText("Dilatation geodesique");
        jMenuTraitementNonLineaireComplexeDilatationGeo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTraitementNonLineaireComplexeDilatationGeoActionPerformed(evt);
            }
        });
        jMenuTraitementNonLineaireComplexe.add(jMenuTraitementNonLineaireComplexeDilatationGeo);

        jMenuTraitementNonLineaireComplexeReconstructionGeo.setText("Reconstruction geodesique");
        jMenuTraitementNonLineaireComplexeReconstructionGeo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTraitementNonLineaireComplexeReconstructionGeoActionPerformed(evt);
            }
        });
        jMenuTraitementNonLineaireComplexe.add(jMenuTraitementNonLineaireComplexeReconstructionGeo);

        jMenuTraitementNonLineaireComplexeFiltreMedian.setText("Filtre median");
        jMenuTraitementNonLineaireComplexeFiltreMedian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTraitementNonLineaireComplexeFiltreMedianActionPerformed(evt);
            }
        });
        jMenuTraitementNonLineaireComplexe.add(jMenuTraitementNonLineaireComplexeFiltreMedian);

        jMenuTraitementNonLineaire.add(jMenuTraitementNonLineaireComplexe);

        jMenuBar1.add(jMenuTraitementNonLineaire);

        jMenuContours.setText("Contours");

        jMenuContoursLineaire.setText("Linéaire");

        jMenuContoursLineaireGradientPrewitt.setText("Gradient Prewitt");
        jMenuContoursLineaireGradientPrewitt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuContoursLineaireGradientPrewittActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuContoursLineaireGradientPrewitt);

        jMenuContoursLineaireGradientSobel.setText("Gradient Sobel");
        jMenuContoursLineaireGradientSobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuContoursLineaireGradientSobelActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuContoursLineaireGradientSobel);

        jMenuContoursLineaireLaplacien4.setText("Laplacien4");
        jMenuContoursLineaireLaplacien4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuContoursLineaireLaplacien4ActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuContoursLineaireLaplacien4);

        jMenuContoursLineaireLaplacien8.setText("Laplacien8");
        jMenuContoursLineaireLaplacien8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuContoursLineaireLaplacien8ActionPerformed(evt);
            }
        });
        jMenuContoursLineaire.add(jMenuContoursLineaireLaplacien8);

        jMenuContours.add(jMenuContoursLineaire);

        jMenuContoursNonLineaire.setText("Non-linéaire");

        jMenuContoursNonLineaireGradientErosion.setText("Gradient erosion");
        jMenuContoursNonLineaireGradientErosion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuContoursNonLineaireGradientErosionActionPerformed(evt);
            }
        });
        jMenuContoursNonLineaire.add(jMenuContoursNonLineaireGradientErosion);

        jMenuContoursNonLineaireGradientDilatation.setText("Gradient dilatation");
        jMenuContoursNonLineaireGradientDilatation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuContoursNonLineaireGradientDilatationActionPerformed(evt);
            }
        });
        jMenuContoursNonLineaire.add(jMenuContoursNonLineaireGradientDilatation);

        jMenuContoursNonLineaireGradientBeucher.setText("Gradient Beucher");
        jMenuContoursNonLineaireGradientBeucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuContoursNonLineaireGradientBeucherActionPerformed(evt);
            }
        });
        jMenuContoursNonLineaire.add(jMenuContoursNonLineaireGradientBeucher);

        jMenuContoursNonLineaireLaplacien.setText("Laplacien non-linéaire");
        jMenuContoursNonLineaireLaplacien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuContoursNonLineaireLaplacienActionPerformed(evt);
            }
        });
        jMenuContoursNonLineaire.add(jMenuContoursNonLineaireLaplacien);

        jMenuContours.add(jMenuContoursNonLineaire);

        jMenuBar1.add(jMenuContours);

        jMenuSeuillage.setText("Seuillage");

        jMenuSeuillageSimple.setText("Seuillage simple");
        jMenuSeuillageSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSeuillageSimpleActionPerformed(evt);
            }
        });
        jMenuSeuillage.add(jMenuSeuillageSimple);

        jMenuSeuillageDouble.setText("Seuillage double");
        jMenuSeuillageDouble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSeuillageDoubleActionPerformed(evt);
            }
        });
        jMenuSeuillage.add(jMenuSeuillageDouble);

        jMenuSeuillageAutomatique.setText("Seuillage automatique");
        jMenuSeuillageAutomatique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSeuillageAutomatiqueActionPerformed(evt);
            }
        });
        jMenuSeuillage.add(jMenuSeuillageAutomatique);

        jMenuBar1.add(jMenuSeuillage);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(843, 400));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuHistogrammeAfficherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeAfficherActionPerformed
        int histo[];
        try {
            int f_int[][] = imageNG.getMatrice();
            histo = Histogramme.Histogramme256(f_int);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
            return;
        }

        // Création du dataset
        XYSeries serie = new XYSeries("Histo");
        for (int i = 0; i < 256; i++) {
            serie.add(i, histo[i]);
        }
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(serie);

        // Creation du chart
        JFreeChart chart = ChartFactory.createHistogram("Histogramme", "Niveaux de gris", "Nombre de pixels", dataset, PlotOrientation.VERTICAL, false, false, false);

        XYPlot plot = (XYPlot) chart.getXYPlot();
        ValueAxis axeX = plot.getDomainAxis();
        axeX.setRange(0, 255);
        plot.setDomainAxis(axeX);

        // creation d'une frame
        ChartFrame frame = new ChartFrame("Histogramme de l'image", chart);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_jMenuHistogrammeAfficherActionPerformed

    private void activeMenusNG() {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(true);
        jMenuHistogramme.setEnabled(true);
        jMenuFiltrageLineaire.setEnabled(true);
        jMenuTraitementNonLineaire.setEnabled(true);
        jMenuContours.setEnabled(true);
        jMenuSeuillage.setEnabled(true);
    }

    private void activeMenusRGB() {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
        jMenuFiltrageLineaire.setEnabled(true);
        jMenuTraitementNonLineaire.setEnabled(true);
        jMenuContours.setEnabled(true);
        jMenuSeuillage.setEnabled(true);
    }

    private void jCheckBoxMenuItemDessinerCerclePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerCerclePlein.isSelected())
            observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(true);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed

    private void jCheckBoxMenuItemDessinerCercleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCercleActionPerformed
        if (!jCheckBoxMenuItemDessinerCercle.isSelected())
            observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(true);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCercleActionPerformed

    private void jMenuItemFourierAfficherPartieImaginaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieImaginaire[][] = fourier.getPartieImaginaire();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, partieImaginaire, "Fourier : Affichage de la partie imaginaire");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed

    private void jMenuItemFourierAfficherPartieReelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieReelleActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieReelle[][] = fourier.getPartieReelle();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, partieReelle, "Fourier : Affichage de la partie reelle");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPartieReelleActionPerformed

    private void jMenuItemFourierAfficherPhaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPhaseActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double phase[][] = fourier.getPhase();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, phase, "Fourier : Affichage de la phase");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPhaseActionPerformed

    private void jMenuItemFourierAfficherModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherModuleActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double module[][] = fourier.getModule();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, module, "Fourier : Affichage du module");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherModuleActionPerformed

    private void jCheckBoxMenuItemDessinerPixelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerPixelActionPerformed
        if (!jCheckBoxMenuItemDessinerPixel.isSelected())
            observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(true);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.CLIC);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerPixelActionPerformed

    private void jMenuItemEnregistrerSousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEnregistrerSousActionPerformed
        JFileChooser choix = new JFileChooser();
        File fichier;

        choix.setCurrentDirectory(new File("."));
        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            fichier = choix.getSelectedFile();
            if (fichier != null) {
                try {
                    if (imageRGB != null) {
                        imageRGB.enregistreFormatPNG(fichier);
                    }
                    if (imageNG != null) {
                        imageNG.enregistreFormatPNG(fichier);
                    }
                } catch (IOException ex) {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuItemEnregistrerSousActionPerformed

    private void jMenuItemOuvrirNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirNGActionPerformed
        JFileChooser choix = new JFileChooser();
        File fichier;

        choix.setCurrentDirectory(new File("."));
        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            fichier = choix.getSelectedFile();
            if (fichier != null) {
                try {
                    imageNG = new CImageNG(fichier);
                    observer.setCImage(imageNG);
                    imageRGB = null;
                    activeMenusNG();
                } catch (IOException ex) {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuItemOuvrirNGActionPerformed

    private void jMenuItemNouvelleNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleNGActionPerformed
        JDialogNouvelleCImageNG dialog = new JDialogNouvelleCImageNG(this, true);
        dialog.setVisible(true);
        imageNG = dialog.getCImageNG();
        observer.setCImage(imageNG);
        imageRGB = null;
        activeMenusNG();
    }//GEN-LAST:event_jMenuItemNouvelleNGActionPerformed

    private void jMenuItemCouleurPinceauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCouleurPinceauActionPerformed
        if (imageRGB != null) {
            Color newC = JColorChooser.showDialog(this, "Couleur du pinceau", couleurPinceauRGB);
            if (newC != null) {
                couleurPinceauRGB = newC;
            }
            observer.setCouleurPinceau(couleurPinceauRGB);
        }

        if (imageNG != null) {
            JDialogChoixCouleurNG dialog = new JDialogChoixCouleurNG(this, true, couleurPinceauNG);
            dialog.setVisible(true);
            couleurPinceauNG = dialog.getCouleur();
        }
    }//GEN-LAST:event_jMenuItemCouleurPinceauActionPerformed

    private void jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerRectanglePlein.isSelected())
            observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(true);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed

    private void jCheckBoxMenuItemDessinerRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed
        if (!jCheckBoxMenuItemDessinerRectangle.isSelected())
            observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(true);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed

    private void jCheckBoxMenuItemDessinerLigneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerLigneActionPerformed
        if (!jCheckBoxMenuItemDessinerLigne.isSelected())
            observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(true);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_LIGNE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerLigneActionPerformed

    private void jMenuItemNouvelleRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleRGBActionPerformed
        JDialogNouvelleCImageRGB dialog = new JDialogNouvelleCImageRGB(this, true);
        dialog.setVisible(true);
        imageRGB = dialog.getCImageRGB();
        observer.setCImage(imageRGB);
        imageNG = null;
        activeMenusRGB();
    }//GEN-LAST:event_jMenuItemNouvelleRGBActionPerformed

    private void jMenuQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuQuitterActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuQuitterActionPerformed

    private void jMenuItemOuvrirRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirRGBActionPerformed
        JFileChooser choix = new JFileChooser();
        File fichier;

        choix.setCurrentDirectory(new File("."));
        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            fichier = choix.getSelectedFile();
            if (fichier != null) {
                try {
                    imageRGB = new CImageRGB(fichier);
                    observer.setCImage(imageRGB);
                    imageNG = null;
                    activeMenusRGB();
                } catch (IOException ex) {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuItemOuvrirRGBActionPerformed

    // ETAPE 1
    // Global Linear Filtering 
    private void jMenuFiltrageLineaireGlobalPasseBasIdealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFiltrageLineaireGlobalPasseBasIdealActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuFiltrageLineaireGlobalPasseBasIdealActionPerformed

    private void jMenuFiltrageLineaireGlobalPasseHautIdealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFiltrageLineaireGlobalPasseHautIdealActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuFiltrageLineaireGlobalPasseHautIdealActionPerformed

    private void jMenuFiltrageLineaireGlobalPasseBasButterworthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFiltrageLineaireGlobalPasseBasButterworthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuFiltrageLineaireGlobalPasseBasButterworthActionPerformed

    private void jMenuFiltrageLineaireGlobalPasseHautButterworthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFiltrageLineaireGlobalPasseHautButterworthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuFiltrageLineaireGlobalPasseHautButterworthActionPerformed

    // Local Linear Filtering 
    private void jMenuFiltrageLineaireLocalMasqueConvolutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFiltrageLineaireLocalMasqueConvolutionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuFiltrageLineaireLocalMasqueConvolutionActionPerformed

    private void jMenuFiltrageLineaireLocalMoyenneurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFiltrageLineaireLocalMoyenneurActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuFiltrageLineaireLocalMoyenneurActionPerformed

    // ETAPE 2
    // Elementaire
    private void jMenuTraitementNonLineaireElementaireErosionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTraitementNonLineaireElementaireErosionActionPerformed
        // Erosion
        try {
            int tmp[][] = MorphoElementaire.erosion(imageNG.getMatrice(), 5);
            CImageNG img = new CImageNG(tmp);
            observer.setCImage(img);
        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuTraitementNonLineaireElementaireErosionActionPerformed

    private void jMenuTraitementNonLineaireElementaireDilatationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTraitementNonLineaireElementaireDilatationActionPerformed
        // Dilatation
        try {
            int tmp[][] = MorphoElementaire.dilatation(imageNG.getMatrice(), 5);
            CImageNG img = new CImageNG(tmp);
            observer.setCImage(img);
        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuTraitementNonLineaireElementaireDilatationActionPerformed

    private void jMenuTraitementNonLineaireElementaireOuvertureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTraitementNonLineaireElementaireOuvertureActionPerformed
        // Ouverture
        try {
            int tmp[][] = MorphoElementaire.ouverture(imageNG.getMatrice(), 5);
            CImageNG img = new CImageNG(tmp);
            observer.setCImage(img);
        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuTraitementNonLineaireElementaireOuvertureActionPerformed

    private void jMenuTraitementNonLineaireElementaireFermetureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTraitementNonLineaireElementaireFermetureActionPerformed
        // Fermeture
        try {
            int tmp[][] = MorphoElementaire.fermeture(imageNG.getMatrice(), 5);
            CImageNG img = new CImageNG(tmp);
            observer.setCImage(img);
        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuTraitementNonLineaireElementaireFermetureActionPerformed

    // Complexe
    private void jMenuTraitementNonLineaireComplexeDilatationGeoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTraitementNonLineaireComplexeDilatationGeoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuTraitementNonLineaireComplexeDilatationGeoActionPerformed

    private void jMenuTraitementNonLineaireComplexeReconstructionGeoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTraitementNonLineaireComplexeReconstructionGeoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuTraitementNonLineaireComplexeReconstructionGeoActionPerformed

    private void jMenuTraitementNonLineaireComplexeFiltreMedianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTraitementNonLineaireComplexeFiltreMedianActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuTraitementNonLineaireComplexeFiltreMedianActionPerformed

    // ETAPE 3
    // part 1
    private void jMenuHistogrammeAfficherParametresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeAfficherParametresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuHistogrammeAfficherParametresActionPerformed

    // part 2
    private void jMenuHistogrammeTransformationsLineaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeTransformationsLineaireActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuHistogrammeTransformationsLineaireActionPerformed

    private void jMenuHistogrammeTransformationsLineaireAvecSaturationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeTransformationsLineaireAvecSaturationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuHistogrammeTransformationsLineaireAvecSaturationActionPerformed

    private void jMenuHistogrammeTransformationsGammaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeTransformationsGammaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuHistogrammeTransformationsGammaActionPerformed

    private void jMenuHistogrammeTransformationsEgalisationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeTransformationsEgalisationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuHistogrammeTransformationsEgalisationActionPerformed

    private void jMenuHistogrammeTransformationsNegatifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeTransformationsNegatifActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuHistogrammeTransformationsNegatifActionPerformed

    // ETAPE 4 
    // Contours linéaires
    private void jMenuContoursLineaireGradientPrewittActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuContoursLineaireGradientPrewittActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuContoursLineaireGradientPrewittActionPerformed

    private void jMenuContoursLineaireGradientSobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuContoursLineaireGradientSobelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuContoursLineaireGradientSobelActionPerformed

    private void jMenuContoursLineaireLaplacien4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuContoursLineaireLaplacien4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuContoursLineaireLaplacien4ActionPerformed

    private void jMenuContoursLineaireLaplacien8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuContoursLineaireLaplacien8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuContoursLineaireLaplacien8ActionPerformed

    // Contours non-linéaires
    private void jMenuContoursNonLineaireGradientErosionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuContoursNonLineaireGradientErosionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuContoursNonLineaireGradientErosionActionPerformed

    private void jMenuContoursNonLineaireGradientDilatationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuContoursNonLineaireGradientDilatationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuContoursNonLineaireGradientDilatationActionPerformed

    private void jMenuContoursNonLineaireGradientBeucherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuContoursNonLineaireGradientBeucherActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuContoursNonLineaireGradientBeucherActionPerformed

    private void jMenuContoursNonLineaireLaplacienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuContoursNonLineaireLaplacienActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuContoursNonLineaireLaplacienActionPerformed

    // Seuillage
    private void jMenuSeuillageSimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSeuillageSimpleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuSeuillageSimpleActionPerformed

    private void jMenuSeuillageDoubleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSeuillageDoubleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuSeuillageDoubleActionPerformed

    private void jMenuSeuillageAutomatiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSeuillageAutomatiqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuSeuillageAutomatiqueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IsilImageProcessing().setVisible(true);
            }
        });
    }

    public void ClicDetected(UnClicEvent e) {
        if (jCheckBoxMenuItemDessinerPixel.isSelected()) {
            try {
                if (imageRGB != null) {
                    imageRGB.setPixel(e.getX(), e.getY(), couleurPinceauRGB);
                }
                if (imageNG != null) {
                    imageNG.setPixel(e.getX(), e.getY(), couleurPinceauNG);
                }
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectLigneDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerLigne.isSelected()) {
            try {
                if (imageRGB != null) {
                    imageRGB.DessineLigne(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                }
                if (imageNG != null) {
                    imageNG.DessineLigne(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
                }
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectRectDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerRectangle.isSelected()) {
            try {
                if (imageRGB != null) {
                    imageRGB.DessineRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                }
                if (imageNG != null) {
                    imageNG.DessineRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
                }
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectCercleDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerCercle.isSelected()) {
            try {
                if (imageRGB != null) {
                    imageRGB.DessineCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                }
                if (imageNG != null) {
                    imageNG.DessineCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
                }
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectCercleFillDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerCerclePlein.isSelected()) {
            try {
                if (imageRGB != null) {
                    imageRGB.RemplitCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                }
                if (imageNG != null) {
                    imageNG.RemplitCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
                }
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectRectFillDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerRectanglePlein.isSelected()) {
            try {
                if (imageRGB != null) {
                    imageRGB.RemplitRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                }
                if (imageNG != null) {
                    imageNG.RemplitRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
                }
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupDessiner;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCercle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCerclePlein;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerLigne;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerPixel;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectangle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectanglePlein;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuContours;
    private javax.swing.JMenu jMenuContoursLineaire;
    private javax.swing.JMenuItem jMenuContoursLineaireGradientPrewitt;
    private javax.swing.JMenuItem jMenuContoursLineaireGradientSobel;
    private javax.swing.JMenuItem jMenuContoursLineaireLaplacien4;
    private javax.swing.JMenuItem jMenuContoursLineaireLaplacien8;
    private javax.swing.JMenu jMenuContoursNonLineaire;
    private javax.swing.JMenuItem jMenuContoursNonLineaireGradientBeucher;
    private javax.swing.JMenuItem jMenuContoursNonLineaireGradientDilatation;
    private javax.swing.JMenuItem jMenuContoursNonLineaireGradientErosion;
    private javax.swing.JMenuItem jMenuContoursNonLineaireLaplacien;
    private javax.swing.JMenu jMenuDessiner;
    private javax.swing.JMenu jMenuFiltrageLineaire;
    private javax.swing.JMenu jMenuFiltrageLineaireGlobal;
    private javax.swing.JMenuItem jMenuFiltrageLineaireGlobalPasseBasButterworth;
    private javax.swing.JMenuItem jMenuFiltrageLineaireGlobalPasseBasIdeal;
    private javax.swing.JMenuItem jMenuFiltrageLineaireGlobalPasseHautButterworth;
    private javax.swing.JMenuItem jMenuFiltrageLineaireGlobalPasseHautIdeal;
    private javax.swing.JMenu jMenuFiltrageLineaireLocal;
    private javax.swing.JMenuItem jMenuFiltrageLineaireLocalMasqueConvolution;
    private javax.swing.JMenuItem jMenuFiltrageLineaireLocalMoyenneur;
    private javax.swing.JMenu jMenuFourier;
    private javax.swing.JMenu jMenuFourierAfficher;
    private javax.swing.JMenu jMenuHistogramme;
    private javax.swing.JMenuItem jMenuHistogrammeAfficher;
    private javax.swing.JMenuItem jMenuHistogrammeAfficherParametres;
    private javax.swing.JMenu jMenuHistogrammeTransformations;
    private javax.swing.JMenuItem jMenuHistogrammeTransformationsEgalisation;
    private javax.swing.JMenuItem jMenuHistogrammeTransformationsGamma;
    private javax.swing.JMenuItem jMenuHistogrammeTransformationsLineaire;
    private javax.swing.JMenuItem jMenuHistogrammeTransformationsLineaireAvecSaturation;
    private javax.swing.JMenuItem jMenuHistogrammeTransformationsNegatif;
    private javax.swing.JMenu jMenuImage;
    private javax.swing.JMenuItem jMenuItemCouleurPinceau;
    private javax.swing.JMenuItem jMenuItemEnregistrerSous;
    private javax.swing.JMenuItem jMenuItemFourierAfficherModule;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieImaginaire;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieReelle;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPhase;
    private javax.swing.JMenuItem jMenuItemNouvelleNG;
    private javax.swing.JMenuItem jMenuItemNouvelleRGB;
    private javax.swing.JMenuItem jMenuItemOuvrirNG;
    private javax.swing.JMenuItem jMenuItemOuvrirRGB;
    private javax.swing.JMenu jMenuNouvelle;
    private javax.swing.JMenu jMenuOuvrir;
    private javax.swing.JMenuItem jMenuQuitter;
    private javax.swing.JMenu jMenuSeuillage;
    private javax.swing.JMenuItem jMenuSeuillageAutomatique;
    private javax.swing.JMenuItem jMenuSeuillageDouble;
    private javax.swing.JMenuItem jMenuSeuillageSimple;
    private javax.swing.JMenu jMenuTraitementNonLineaire;
    private javax.swing.JMenu jMenuTraitementNonLineaireComplexe;
    private javax.swing.JMenuItem jMenuTraitementNonLineaireComplexeDilatationGeo;
    private javax.swing.JMenuItem jMenuTraitementNonLineaireComplexeFiltreMedian;
    private javax.swing.JMenuItem jMenuTraitementNonLineaireComplexeReconstructionGeo;
    private javax.swing.JMenu jMenuTraitementNonLineaireElementaire;
    private javax.swing.JMenuItem jMenuTraitementNonLineaireElementaireDilatation;
    private javax.swing.JMenuItem jMenuTraitementNonLineaireElementaireErosion;
    private javax.swing.JMenuItem jMenuTraitementNonLineaireElementaireFermeture;
    private javax.swing.JMenuItem jMenuTraitementNonLineaireElementaireOuverture;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables

}
